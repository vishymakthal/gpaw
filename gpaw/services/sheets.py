from googleapiclient.discovery import build

from gpaw.services.gsuite import GoogleSuite


class GoogleSheets(GoogleSuite):
    """The service object responsible for providing an interface with Google Sheets.
    
    :param auth: An OAuth credential object generated by the oauth2client library, gets passed to the super's constructor.
    
    """
    def __init__(self, auth):
        GoogleSuite.__init__(self, auth)
        self._client = build('sheets', 'v4', credentials=self.auth).spreadsheets()
        self._spreadsheets = {}

    def spreadsheet(self, id):
        
        if self._spreadsheets.get(id, False):
            return self._spreadsheets[id]

        s = Spreadsheet(self._client, id)
        self._spreadsheets[id] = s 
        return s 

class Spreadsheet():
    """Object that represents a single spreasheet.
    
    :param id str: Id string for the spreadsheet.
    :params c: Google API service client object to execute functions with. 
    
    """

    def __init__(self, c, _id):
        self._c = c
        self.id = _id 

    def read(self, cells, columns=False):
        """Reads data from a provided range.
        
        :param cells (str): Range of cells to read 
        :param columns (bool): flag to specify that columns are being written.

        :returns List[List]: 2D array representing cells read.
        """ 

        result = self._c.values().get(
            spreadsheetId=self.id,
            majorDimension='COLUMNS' if columns else 'ROWS', 
            range=cells
            ).execute()

        return result['values']

    def write(self, cells, data, columns=False):
        """Writes data to a range of cells. Data will fill as much of the range provided as possible, and
        will be truncated if it doesn't fit in the cell range.

        :param cell (str): First cell of the range to write to (top left corner of the range)
        :param data (List[List]): List of rows/columns to write to the spreadsheet.
        :param columns (bool): flag to specify that columns are being written.
        """ 

        self._c.values().update(
            spreadsheetId=self.id,
            range=cells,
            body={
                'values' : data,
                'majorDimension': 'COLUMNS' if columns else 'ROWS',
            },
            valueInputOption='RAW'
            ).execute() 
    
    def clear(self, cells):

        self._c.values().clear(
            spreadsheetId=self.id,
            range=cells
            ).execute()